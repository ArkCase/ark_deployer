#!/bin/bash
set -euo pipefail
. /.functions

set_or_default BASE_DIR "/app"
set_or_default INIT_DIR "${BASE_DIR}/init"

set_as_boolean FORCE_HASHES
set_as_boolean FORCE_DEPLOY

cleanup()
{
	rm -rf "${TARGET_TMP_DIR}" &>/dev/null
}

download()
{
	local URL="${1}"
	local TGT="${2}"
	# The artifact is there, so pull it into the destination
	curl -L --fail -s -o "${TGT}" "${URL}" || fail "Failed to download the artifact from [${URL}] into [${TGT}]"
}

usage()
{
	{
		echo -e "usage: ${BASH_SOURCE:-${0}} operation artifact targetDir [updateMark]"
		echo -e ""
		echo -e "    operation  => copy, extract, or extractdir"
		echo -e "    artifact   => path of the artifact to deploy (from DEPL_URL)"
		echo -e "    targetDir  => the directory into which to deploy"
		echo -e ""
		echo -e "    Operations:"
		echo -e "        copy        : copy the file verbatim into targetDir"
		echo -e "        extract     : unzip the file into targetDir (unzip -o -d ...)"
		echo -e "        extract-dir : like extract, but create a subdirectory with"
		echo -e "                      the basename of the file, minus the extension"
	} 1>&2
	exit 1
}

[ ${#} -eq 3 ] || usage

OPERATION="${1,,}"
case "${OPERATION}" in
	copy | extract | extractdir | extract-dir ) ;;
	* ) fail "Invalid operation [${OPERATION}]" ;;
esac

ARTIFACT="${2}"

[[ "${ARTIFACT}" =~ [^/]$ ]] || fail "The artifact name may not end in a slash: [${ARTIFACT}]"

# Sanitize the artifact name (single slashes, remove leading slash)
ARTIFACT="$(echo -n "${ARTIFACT}" | sed -e 's;/+;/;g' -e 's;^/;;g')"

# Pick the last component, which will be used locally
ARTIFACT_NAME="${ARTIFACT##*/}"

# Sanitize artifact components, split by slashes, to ensure that every
# component is properly URL-escaped
IFS="/" read -a PARTS <<< "${ARTIFACT}"
ENCODED_ARTIFACT=""
for P in "${PARTS[@]}" ; do
	[ -z "${ENCODED_ARTIFACT}" ] || ENCODED_ARTIFACT+="/"
	ENCODED_ARTIFACT+="$(echo -n "${P}" | jq -sRr @uri)"
done

TARGET_DIR="${3}"
require_dir_readwrite "${TARGET_DIR}"
TARGET_DIR="$(readlink -f "${TARGET_DIR}")"

TARGET_TMP_DIR="${TARGET_DIR}/.deploy.$(uuidgen)"
mkdir -p "${TARGET_TMP_DIR}" || fail "Failed to create the temporary work directory"
TARGET_TMP_FILE="${TARGET_TMP_DIR}/${ARTIFACT_NAME}"

# Make sure we run cleanup on exit
trap cleanup EXIT

wait-for-artifacts || exit ${?}

# Check for artifact availability
ARTIFACT_URL="${DEPL_URL}/${ENCODED_ARTIFACT}"
VERSION_URL="${ARTIFACT_URL}.ver"
CHECKSUM_URL="${ARTIFACT_URL}.sum"
CHECK_URL="${DEPL_URL}/api/1/${ENCODED_ARTIFACT}?cmd=info"
HTTP_CODE="$(curl -L -s -o /dev/null -w "%{http_code}" "${CHECK_URL}")"
[ ${HTTP_CODE} -lt 400 ] || fail "The artifact [${ARTIFACT}] is not available for deployment (HTTP CODE = ${HTTP_CODE} / ${CHECK_URL})"

# Same with the version and the checksum, but it's OK if these aren't there b/c
# we can come up with defaults

NEW_VER="$(curl -L -s --fail "${VERSION_URL}" 2>/dev/null || true)"
grep -q '<!DOCTYPE html>' <<< "${NEW_VER}" && NEW_VER=""
[ -n "${NEW_VER}" ] || NEW_VER="(unknown)"

# By default, no checksum...
SUM=""

# If we're not forcing a local hash computation, we try to download the cached value
as_boolean "${FORCE_HASHES}" || SUM="$(curl -L -s --fail "${CHECKSUM_URL}" 2>/dev/null || true)"

# If the sum is invalid, or we're requesting local checksum computation, we do just that
if [[ ! "${SUM}" =~ ^[0-9a-f]{64}$ ]] ; then
	as_boolean "${FORCE_HASHES}" || say "Failed to find the cached checksum for [${ARTIFACT}], or its contents are invalid. Computing it directly..."
	download "${ARTIFACT_URL}" "${TARGET_TMP_FILE}"
	read SUM REST < <(sha256sum "${TARGET_TMP_FILE}" | tr '[:upper:]' '[:lower:]')
	[[ "${SUM}" =~ ^[0-9a-f]{64}$ ]] || fail "Failed to compute the sha256 checksum for [${ARTIFACT}]"
fi

# Always the checksum in lowercase
SUM="${SUM,,}"

# Do we need to redeploy, regardless?
# This is the file track marker where we'll track the deployment status
MARKER_FILE="${TARGET_DIR}/.version"
if ! as_boolean "${FORCE_DEPLOY}" ; then
	if [ -e "${MARKER_FILE}" ] ; then
		OLD_DATE=""
		OLD_ARTIFACT=""
		OLD_VER=""
		OLD_SUM="<none>"
		EXISTING_LOADED="false"

		# We explicitly don't call sort b/c we want to get the last record on the list,
		# regardless of its contents
		REST=""
		# We use "|| true" at the end b/c if the output is empty then we have nothing to read
		# and this will cause the script to exit
		IFS="|" read OLD_DATE OLD_VER OLD_SUM OLD_ARTIFACT < <(sed -e '/^\s*#.*$/d' -e '/^\s*$/d' < "${MARKER_FILE}" | egrep "\|[0-9a-fA-F]{64}\|${ARTIFACT}$" | tail -1) || true
		[ -n "${OLD_SUM}" ] && EXISTING_LOADED="true"
		OLD_SUM="${OLD_SUM,,}"

		if "${EXISTING_LOADED}" ; then
			if [ "${SUM}" == "${OLD_SUM}" ] ; then
				ok "The artifact [${ARTIFACT}] appears to already be deployed into [${TARGET_DIR}] since ${OLD_DATE} (version = ${OLD_VER}, verified by checksum)."
				exit 0
			fi
			eyes "File content change detected for [${ARTIFACT}] through file checksum:\n\tEXISTING: [${OLD_VER} = ${OLD_SUM}]\n\tINCOMING: [${NEW_VER} = ${SUM}]"
		else
			warn "Couldn't find a prior installation record for [${ARTIFACT}], deploying the file:\n\tINCOMING: [${NEW_VER} = ${SUM}]"
		fi
	else
		warn "Version tracking hasn't yet begun for ${TARGET_DIR} (the marker file [${MARKER_FILE}] is missing)"
	fi
else
	warn "Deployment is forced, regardless of prior deployments"
fi

# We delay the download as much as possible, to avoid downloading if the checksum
# matches and all that (i.e. if we don't need to deploy, we avoid downloading)
is_file "${TARGET_TMP_FILE}" || download "${ARTIFACT_URL}" "${TARGET_TMP_FILE}"

set_as_boolean UPDATE_MARK

UPDATE_MARK_FILE=".updated"
MARK="$(date -u -Ins)|${NEW_VER}|${SUM}|${ARTIFACT}"
case "${OPERATION,,}" in
	extract )
		unzip -o -d "${TARGET_DIR}" "${TARGET_TMP_FILE}"
		UPDATE_MARK_FILE="${TARGET_DIR}/${UPDATE_MARK_FILE}"
		;;

	extractdir | extract-dir )
		BASENAME="${ARTIFACT_NAME%.*}"
		TARGET_DIR+="/${BASENAME}"
		mkdir -p "${TARGET_DIR}"
		unzip -o -d "${TARGET_DIR}" "${TARGET_TMP_FILE}"
		UPDATE_MARK_FILE="${TARGET_DIR}/${UPDATE_MARK_FILE}"
		;;

	copy )
		mv -vf "${TARGET_TMP_FILE}" "${TARGET_DIR}/${ARTIFACT_NAME}"
		UPDATE_MARK_FILE="${TARGET_DIR}/.${ARTIFACT_NAME}${UPDATE_MARK_FILE}"
		;;

	* )
		fail "Unrecognized operation requested: [${OPERATION}]"
		;;
esac

if as_boolean "${UPDATE_MARK}" ; then
	eyes "Setting the update marker at [${UPDATE_MARK_FILE}]"
	echo -n "${MARK}" > "${UPDATE_MARK_FILE}"
fi

# Add the marker record for this version
echo -e "${MARK}" >> "${MARKER_FILE}"
exit 0
